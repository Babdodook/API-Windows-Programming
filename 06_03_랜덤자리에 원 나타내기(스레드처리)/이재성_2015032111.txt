#include <windows.h>
#include<time.h>

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
HINSTANCE g_hInst;
HWND hWndMain;
LPCTSTR lpszClass = TEXT("MultiThread");

int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance
	, LPSTR lpszCmdParam, int nCmdShow)
{
	HWND hWnd;
	MSG Message;
	WNDCLASS WndClass;
	g_hInst = hInstance;

	WndClass.cbClsExtra = 0;
	WndClass.cbWndExtra = 0;
	WndClass.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW);
	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	WndClass.hInstance = hInstance;
	WndClass.lpfnWndProc = WndProc;
	WndClass.lpszClassName = lpszClass;
	WndClass.lpszMenuName = NULL;
	WndClass.style = CS_HREDRAW | CS_VREDRAW;
	RegisterClass(&WndClass);

	hWnd = CreateWindow(lpszClass, lpszClass, WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,
		NULL, (HMENU)NULL, hInstance, NULL);
	ShowWindow(hWnd, nCmdShow);

	while (GetMessage(&Message, NULL, 0, 0)) {
		TranslateMessage(&Message);
		DispatchMessage(&Message);
	}
	return (int)Message.wParam;
}

DWORD WINAPI ThreadFunc(LPVOID prc)
{
	HDC hdc;
	static BYTE Red;
	static BYTE Green;
	static BYTE Blue;
	
	HBRUSH hBrush, hOldBrush;
	POINT point = *(LPPOINT)prc;
	hdc = GetDC(hWndMain);
	
	for (;;) {
		Red = rand() % 255;
		Green = rand() % 255;
		Blue = rand() % 255;
		hBrush = CreateSolidBrush(RGB(Red, Green, Blue));
		hOldBrush = (HBRUSH)SelectObject(hdc, hBrush);
		Ellipse(hdc, point.x - 20, point.y - 20, point.x + 20, point.y + 20);
		SelectObject(hdc, hOldBrush);
		DeleteObject(hBrush);
		Sleep(400);
	}
	ReleaseDC(hWndMain, hdc);
	return 0;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	HDC hdc;
	DWORD ThreadID;
	RECT rect;
	static POINT point;
	static int index = 0;
	

	switch (iMessage) {
	case WM_CREATE:
		srand((unsigned)time(NULL));
		hWndMain = hWnd;
		return TRUE;
	case WM_LBUTTONDOWN:
		hdc = GetDC(hWnd);
		GetClientRect(hWnd, &rect);
		point.x = rand() % rect.right-20;
		point.y = rand() % rect.bottom-20;
		if (index < 30)
		{
			CloseHandle(CreateThread(NULL, 0, ThreadFunc, &point, 0, &ThreadID));
			index++;
		}
		ReleaseDC(hWnd, hdc);
		return 0;
	case WM_DESTROY:
		
		PostQuitMessage(0);
		return 0;
	}
	return(DefWindowProc(hWnd, iMessage, wParam, lParam));
}
